// Code generated by protoc-gen-go. DO NOT EDIT.
// source: porust.proto

package porust

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Req struct {
	Reqdata              string   `protobuf:"bytes,1,opt,name=reqdata,proto3" json:"reqdata,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Req) Reset()         { *m = Req{} }
func (m *Req) String() string { return proto.CompactTextString(m) }
func (*Req) ProtoMessage()    {}
func (*Req) Descriptor() ([]byte, []int) {
	return fileDescriptor_de9b153ad3931b42, []int{0}
}

func (m *Req) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Req.Unmarshal(m, b)
}
func (m *Req) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Req.Marshal(b, m, deterministic)
}
func (m *Req) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Req.Merge(m, src)
}
func (m *Req) XXX_Size() int {
	return xxx_messageInfo_Req.Size(m)
}
func (m *Req) XXX_DiscardUnknown() {
	xxx_messageInfo_Req.DiscardUnknown(m)
}

var xxx_messageInfo_Req proto.InternalMessageInfo

func (m *Req) GetReqdata() string {
	if m != nil {
		return m.Reqdata
	}
	return ""
}

type Rsp struct {
	Rspdata              string   `protobuf:"bytes,1,opt,name=rspdata,proto3" json:"rspdata,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Rsp) Reset()         { *m = Rsp{} }
func (m *Rsp) String() string { return proto.CompactTextString(m) }
func (*Rsp) ProtoMessage()    {}
func (*Rsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_de9b153ad3931b42, []int{1}
}

func (m *Rsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Rsp.Unmarshal(m, b)
}
func (m *Rsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Rsp.Marshal(b, m, deterministic)
}
func (m *Rsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rsp.Merge(m, src)
}
func (m *Rsp) XXX_Size() int {
	return xxx_messageInfo_Rsp.Size(m)
}
func (m *Rsp) XXX_DiscardUnknown() {
	xxx_messageInfo_Rsp.DiscardUnknown(m)
}

var xxx_messageInfo_Rsp proto.InternalMessageInfo

func (m *Rsp) GetRspdata() string {
	if m != nil {
		return m.Rspdata
	}
	return ""
}

func init() {
	proto.RegisterType((*Req)(nil), "porust.Req")
	proto.RegisterType((*Rsp)(nil), "porust.Rsp")
}

func init() { proto.RegisterFile("porust.proto", fileDescriptor_de9b153ad3931b42) }

var fileDescriptor_de9b153ad3931b42 = []byte{
	// 116 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0xc8, 0x2f, 0x2a,
	0x2d, 0x2e, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0x94, 0xe4, 0xb9, 0x98,
	0x83, 0x52, 0x0b, 0x85, 0x24, 0xb8, 0xd8, 0x8b, 0x52, 0x0b, 0x53, 0x12, 0x4b, 0x12, 0x25, 0x18,
	0x15, 0x18, 0x35, 0x38, 0x83, 0x60, 0x5c, 0xb0, 0x82, 0xe2, 0x02, 0xb0, 0x82, 0xe2, 0x02, 0x14,
	0x05, 0x10, 0xae, 0x91, 0x16, 0x17, 0x4b, 0x40, 0x7e, 0x51, 0xb1, 0x90, 0x12, 0x17, 0x9b, 0x67,
	0x5e, 0x59, 0x7e, 0x76, 0xaa, 0x10, 0xb7, 0x1e, 0xd4, 0xaa, 0xa0, 0xd4, 0x42, 0x29, 0x04, 0xa7,
	0xb8, 0x20, 0x89, 0x0d, 0x6c, 0xb9, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xac, 0xe4, 0x90, 0xc5,
	0x8c, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PorsClient is the client API for Pors service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PorsClient interface {
	Invoke(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Rsp, error)
}

type porsClient struct {
	cc *grpc.ClientConn
}

func NewPorsClient(cc *grpc.ClientConn) PorsClient {
	return &porsClient{cc}
}

func (c *porsClient) Invoke(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Rsp, error) {
	out := new(Rsp)
	err := c.cc.Invoke(ctx, "/porust.Pors/Invoke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PorsServer is the server API for Pors service.
type PorsServer interface {
	Invoke(context.Context, *Req) (*Rsp, error)
}

func RegisterPorsServer(s *grpc.Server, srv PorsServer) {
	s.RegisterService(&_Pors_serviceDesc, srv)
}

func _Pors_Invoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PorsServer).Invoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/porust.Pors/Invoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PorsServer).Invoke(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

var _Pors_serviceDesc = grpc.ServiceDesc{
	ServiceName: "porust.Pors",
	HandlerType: (*PorsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Invoke",
			Handler:    _Pors_Invoke_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "porust.proto",
}
