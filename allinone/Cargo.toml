[package]
name = "allinone"
version = "0.1.0"
authors = ["r0x <r00txxyyzz@gmail.com>"]
edition = "2018"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
num-traits = "0.2.14"
num-derive = "0.3.3"
consul-rs = {git = "https://github.com/liyiheng/consul-rs", branch = "master"}
#local-ip = "0.1"
local_ipaddress = "0.1.3"
serde = "1.0.117"
lazy_static = "1.4.0"
futures = "0.3.5"
serde_json = "1.0"
tokio = { version = "0.3", features = ["full"] }
log = "0.4.14"
simplelog = "0.10.0"
#rand = "0.7.3"
#rustc-serialize = "0.3"
base64 = "0.13.0"
#aes = "0.7.2"
block-modes = "0.8.1"
hex-literal = "0.3.1"
#crypto = "0.2.0"
#rust-crypto = "^0.2"
#rand = "0.8.3"
libc = "^0.2"
time = "^0.1"
rand = "^0.3"
rustc-serialize = "^0.3"
hmac = "0.6.2"
#hmac = "0.11.0"
#sha2 = "0.9.5"
sha2 = "0.7.1"
hex = "0.4.3"
#ctrlc = "3.1.9"
#signal-hook = "0.3.9"
sna = "0.1"
async-std = { version = "1.5.0", features = ["attributes"] }

#rocket = "0.4.9"
#rocket = "0.3.6"
#rocket_codegen = "0.3.6"

#openssl = "0.9.24"
#hex = "0.3.1"
#otpauth = "0.2.7"
#time = "0.1.40"

#mysql = "*"
#json支持(必须)
#serde_json = "1.0"
#日期支持(必须)
chrono = { version = "0.4", features = ["serde"] }
#log日志支持(必须)
#log = "0.4"
#fast_log="1.3"
#BigDecimal支持(可选)
#bigdecimal = "0.2"
#rbatis支持
#rbatis =  { version = "1.8" }
crossbeam = "0.8"

#[dependencies.sqlx-core]
#version = "0.5.1"
#features = ["all-types", "runtime-async-std-rustls"]
#optional = true

#[[bin]]
# run:  cargo run --bin pors-server
#name = "rocket"
#path = "src/rocket_main.rs"


#[dependencies.async-std]
#version = "1.6"
#features = ["attributes"]

# 此为 开发配置文件, 给 `cargo build` 所使用.
[profile.dev]
#opt-level = 0      # 控制编译器构建的`--opt-level`。
                   # 0-1适合调试。 2是良好优化的。最大为 3。
                   # 's' 企图优化大小, 'z' 则 进一步优化大小.
#debug = true       # (u32 or bool) 包括调试信息（调试符号）.
                   # 相当于 `-C debuginfo=2` 编译器 标志.
#rpath = false      # 控制 编译器 是否应该设置加载器路径.
                   # 若为 true, 传递 `-C rpath` 标志 给 编译器.
#lto = false        # 链接时间优化通常会减少二进制文件和静态库的大小
                   # 但会增加编译时间.
                   # 若是 true, 传递 `-C lto` 标志 给 编译器, 和 若是一个
                   # 字符串值 像 'thin' ，那会传递 `-C lto=thin`
                   # 给 编译器
#debug-assertions = true # 控制是否启用调试断言
                   # (e.g. debug_assert!() 和 算术溢出检查)
#codegen-units = 16 # if > 1 并行代码生成，以改善
                   # 编译时间, 但阻止了些优化.
                   # 传递 `-C codegen-units`.
#panic = 'unwind'   # 恐慌策略 (`-C panic=...`), 也可以是 'abort'
incremental = true # 是否启用增量编译
#overflow-checks = true # 使用溢出检查进行整数运算。





